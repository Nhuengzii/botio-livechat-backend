openapi: "3.0.1"
info:
  title: "Botio Live Chat API"
  description: "This is an API for Botio livechat system."
  version: "1.0.0"
  contact:
    email: "admin@botio.io"
servers:
  # id is subject to change
  - url: "https://{id}.execute-api.ap-southeast-1.amazonaws.com/{stage}"
    variables:
      id:
        default: "1ai1vqnymh"
      stage:
        default: "dev"
tags:
  - name: facebook
    description: "Operations that involve facebook platform"
  - name: instagram
    description: "Operations that involve instagram platform"
  - name: line
    description: "Operations that involve line platform"
  - name: all
    description: "Operations that involve all platforms"
  - name: shop
    description: "Operations that involve shop meta information"
  - name: root
    description: "Top-level operations"
paths:
  # /{shop_id}/facebook/... endpoints
  /shops/{shop_id}/facebook/{page_id}/webhook:
    get:
      tags:
        - facebook
      summary: Facebook webhook verification
      description: |
        For use by facebook to verify webhook.
      operationId: facebookWebhookVerify
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Webhook handler is up and running"
        "500":
          description: "Internal Server Error: Unexpected error"
    post:
      tags:
        - facebook
      summary: Facebook webhook
      description: |
        For use by facebook to send webhook events.
      operationId: facebookWebhook
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Webhook events received"
        "401":
          description: "Unauthorized: Invalid signature"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/facebook/{page_id}/conversations/{conversation_id}:
    get:
      tags:
        - facebook
      summary: Get a facebook conversation
      operationId: getFacebookConversation
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      responses:
        "200":
          description: "OK: Conversation found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationWrapper"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    patch:
      tags:
        - facebook
      summary: Update a facebook conversation's field(s)
      operationId: patchFacebookConversation
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        $ref: "#/components/requestBodies/PatchConversation"
      responses:
        "200":
          description: "OK: Conversation found and updated"
        "400":
          description: "Bad request: Check patch conversation request body"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/facebook/{page_id}/conversations:
    get:
      tags:
        - facebook
      summary: List facebook page's conversations
      operationId: listFacebookPageConversations
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ListConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationArray"
        "204":
          description: "No Content: No conversations found"
        "400":
          description: "Bad Request: Check skip, limit, and filter"
        "404":
          description: "Not Found: Page not found. Check shop_id and page_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/facebook/{page_id}/conversations/{conversation_id}/messages:
    get:
      tags:
        - facebook
      summary: List facebook conversation's messages
      operationId: listFacebookConversationMessages
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ListMessagesFilter"
      responses:
        "200":
          description: "OK: Messages found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageArray"
        "204":
          description: "No Content: No messages found"
        "400":
          description: "Bad Request: Check skip, limit, and filter"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    post:
      tags:
        - facebook
      summary: Send a facebook message to a facebook conversation
      operationId: postFacebookMessage
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: "text message"
                  properties:
                    message:
                      type: string
                - type: object
                  required:
                    - type
                    - payload
                  properties:
                    type:
                      type: string
                      enum:
                        - "image"
                        - "video"
                        - "audio"
                        - "file"
                        - "facebook-template-generic"
                    payload:
                      oneOf:
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadImage"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadVideo"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadAudio"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadFile"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadFacebookTemplateGeneric"
      responses:
        "200":
          description: "OK: Message sent"
        "400":
          description: "Bad Request: Check post message request body"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/facebook/{page_id}:
    get:
      tags:
        - facebook
      summary: Get facebook page statuses
      description: |
        Get facebook page's unread and all conversations counts.
      operationId: getFacebookPageStatus
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Page status found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStatus"
        "404":
          description: "Not Found: Page not found. Check shop_id and page_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  # /{shop_id}/instagram/... endpoints
  /shops/{shop_id}/instagram/{page_id}/webhook:
    get:
      tags:
        - instagram
      summary: Instagram webhook verification
      description: |
        For use by instagram to verify webhook.
      operationId: instagramWebhookVerify
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Webhook handler is up and running"
        "500":
          description: "Internal Server Error: Unexpected error"
    post:
      tags:
        - instagram
      summary: Instagram webhook
      description: |
        For use by instagram to send webhook events.
      operationId: instagramWebhook
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Webhook events received"
        "401":
          description: "Unauthorized: Invalid signature"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/instagram/{page_id}/conversations/{conversation_id}:
    get:
      tags:
        - instagram
      summary: Get an instagram conversation
      operationId: getInstagramConversation
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      responses:
        "200":
          description: "OK: Conversation found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationWrapper"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    patch:
      tags:
        - instagram
      summary: Update an instagram conversation's field(s)
      operationId: patchInstagramConversation
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        $ref: "#/components/requestBodies/PatchConversation"
      responses:
        "200":
          description: "OK: Conversation found and updated"
        "400":
          description: "Bad Request: Check patch conversation request body"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/instagram/{page_id}/conversations:
    get:
      tags:
        - instagram
      summary: List instagram page's conversations
      operationId: listInstagramPageConversations
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ListConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationArray"
        "204":
          description: "No Content: No conversations found"
        "400":
          description: "Bad Request: Check skip, limit, and filter"
        "404":
          description: "Not Found: Page not found. Check shop_id and page_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/instagram/{page_id}/conversations/{conversation_id}/messages:
    get:
      tags:
        - instagram
      summary: List instagram conversation's messages
      operationId: listInstagramConversationMessages
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ListMessagesFilter"
      responses:
        "200":
          description: "OK: Messages found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageArray"
        "204":
          description: "No Content: No messages found"
        "400":
          description: "Bad Request: Check skip, limit, and filter"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    post:
      tags:
        - instagram
      summary: Send an instagram message to an instagram conversation
      operationId: postInstagramMessage
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: "text message"
                  properties:
                    message:
                      type: string
                - type: object
                  required:
                    - type
                    - payload
                  properties:
                    type:
                      type: string
                      enum:
                        - "image"
                        - "video"
                        - "audio"
                        - "file"
                        - "instagram-template-generic"
                    payload:
                      oneOf:
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadImage"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadVideo"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadAudio"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadFile"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadInstagramGeneric"
      responses:
        "200":
          description: "OK: Message sent"
        "400":
          description: "Bad Request: Check post message request body"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/instagram/{page_id}:
    get:
      tags:
        - instagram
      summary: Get instagram page statuses
      description: |
        Get instagram page's unread and all conversation counts.
      operationId: getInstagramPageStatus
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Page status found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStatus"
        "404":
          description: "Not Found: Page not found. Check shop_id and page_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  # /{shop_id}/line/... endpoints
  /shops/{shop_id}/line/{page_id}/webhook:
    post:
      tags:
        - line
      summary: Line webhook
      description: |
        For use by line to send webhook events.
      operationId: lineWebhook
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Webhook event received"
        "401":
          description: "Unauthorized: Invalid signature"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/line/{page_id}/conversations/{conversation_id}:
    get:
      tags:
        - line
      summary: Get a line conversation
      operationId: getLineConversation
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      responses:
        "200":
          description: "OK: Conversation found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationWrapper"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    patch:
      tags:
        - line
      summary: Update a line conversation's field(s)
      operationId: patchLineConversation
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        $ref: "#/components/requestBodies/PatchConversation"
      responses:
        "200":
          description: "OK: Conversation found and updated"
        "400":
          description: "Bad Request: Check patch conversation request body"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/line/{page_id}/conversations:
    get:
      tags:
        - line
      summary: list all conversations of a specific line page
      operationId: listLinePageConversations
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ListConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationArray"
        "204":
          description: "No Content: No conversations found"
        "400":
          description: "Bad Request: Check skip, limit, and filter"
        "404":
          description: "Not Found: Page not found. Check shop_id and page_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/line/{page_id}/conversations/{conversation_id}/messages:
    get:
      tags:
        - line
      summary: list all messages in a specific line conversation
      operationId: listLineConversationMessages
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ListMessagesFilter"
      responses:
        "200":
          description: "OK: Messages found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageArray"
        "204":
          description: "No Content: No messages found"
        "400":
          description: "Bad Request: Check skip, limit, and filter"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    post:
      tags:
        - line
      summary: Send a line message to a line conversation
      operationId: postLineMessage
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: "text message"
                  properties:
                    message:
                      type: string
                - type: object
                  required:
                    - type
                    - payload
                  properties:
                    type:
                      type: string
                      enum:
                        - "image"
                        - "video"
                        - "audio"
                        - "line-template-buttons"
                        - "line-template-confirm"
                        - "line-template-carousel"
                        - "line-template-image-carousel"
                    payload:
                      oneOf:
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadImage"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadVideo"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadAudio"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadLineTemplateButtons"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadLineTemplateConfirm"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadLineTemplateCarousel"
                        - $ref: "#/components/schemas/PostMessageAttachmentPayloadLineTemplateImageCarousel"
      responses:
        "200":
          description: "OK: Message sent"
        "400":
          description: "Bad Request: Check post message request body"
        "404":
          description: "Not Found: Conversation not found. Check shop_id, page_id, and conversation_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/line/{page_id}:
    get:
      tags:
        - line
      summary: Get line page status
      description: |
        Get line page's unread and all conversations counts.
      operationId: getLinePageStatus
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/PageID"
      responses:
        "200":
          description: "OK: Page status found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStatus"
        "404":
          description: "Not Found: Page not found. Check shop_id and page_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  # /{shop_id}/all/... endpoints
  /shops/{shop_id}/all:
    get:
      tags:
        - all
      summary: List shop's all platforms' statuses.
      description: |
        List shop's all platforms' unread and all conversations counts.
      operationId: ListShopAllPlatformsStatuses
      parameters:
        - $ref: "#/components/parameters/ShopID"
      responses:
        "200":
          description: "OK: Platforms information found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformsStatusesArray"
        "204":
          description: "No Content: No platforms information found"
        "404":
          description: "Not Found: Shop not found. Check shop_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/all/conversations:
    get:
      tags:
        - all
      summary: List shop's all platforms' conversations.
      operationId: listShopAllPlatformsConversations
      parameters:
        - $ref: "#/components/parameters/ShopID"
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ListConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationArray"
        "204":
          description: "No Content: No conversations found"
        "400":
          description: "Bad Request: Check skip, limit, and filter"
        "404":
          description: "Not Found: Shop not found. Check shop_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  # /shops/... endpoints
  /shops:
    post:
      tags:
        - shop
      summary: Create a shop
      description: |
        Create a shop  with the request body provided, and create an empty shop config together with it.
      operationId: postShop
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                facebookPageID:
                  type: string
                facebookAuthentication:
                  $ref: "#/components/schemas/FacebookAuthentication"
                instagramPageID:
                  type: string
                instagramAuthentication:
                  $ref: "#/components/schemas/InstagramAuthentication"
                linePageID:
                  type: string
                lineAuthentication:
                  $ref: "#/components/schemas/LineAuthentication"
      responses:
        "200": # TODO return shopID in the implementation
          description: "OK: Shop created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  shopID:
                    type: string
                    description: ID of the created shop
        "400":
          description: "Bad Request: Check post shop request body"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}:
    get:
      tags:
        - shop
      summary: List shop's platforms
      operationId: listShopPlatforms
      parameters:
        - $ref: "#/components/parameters/ShopID"
      responses:
        "200":
          description: "OK: Platforms found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShopPlatformsInfoArray"
        "204":
          description: "No Content: No platforms found"
        "404":
          description: "Not Found: Shop not found. Check shop_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    patch:
      tags:
        - shop
      summary: Update a shop's information
      operationId: patchShop
      parameters:
        - $ref: "#/components/parameters/ShopID"
      requestBody:
        content: # TODO add request type in the implementation instead of using raw shop type to make shopID not patchable
          application/json:
            schema:
              type: object
              properties:
                facebookPageID:
                  type: string
                facebookAuthentication:
                  $ref: "#/components/schemas/FacebookAuthentication"
                instagramPageID:
                  type: string
                instagramAuthentication:
                  $ref: "#/components/schemas/InstagramAuthentication"
                linePageID:
                  type: string
                lineAuthentication:
                  $ref: "#/components/schemas/LineAuthentication"
      responses:
        "200":
          description: "OK: Shop updated"
        "400":
          description: "Bad Request: Check shop_id and patch shop request body"
        "404":
          description: "Not Found: Shop not found. Check shop_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  /shops/{shop_id}/config:
    get:
      tags:
        - shop
      summary: Get a shop's config
      operationId: getShopConfig
      parameters:
        - $ref: "#/components/parameters/ShopID"
      responses:
        "200":
          description: "OK: Shop config found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShopConfigWrapper"
        "404":
          description: "Not Found: Shop config not found. Check shop_id"
        "500":
          description: "Internal Server Error: Unexpected error"
    patch:
      tags:
        - shop
      summary: Update a shop's config
      description: |
        Add a new shop template message
      operationId: patchShopConfig
      parameters:
        - $ref: "#/components/parameters/ShopID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - templatePayload
              properties:
                templatePayload:
                  type: string
      responses:
        "200":
          description: "OK: Shop config updated"
          content:
            application/json:
              schema:
                type: object
                required:
                  - templateID
                properties:
                  templateID:
                    type: string
                    description: ID of the created template message
        "400":
          description: "Bad Request: Check shop_id and patch shop config request body"
        "404":
          description: "Not Found: Shop config not found. Check shop_id"
        "500":
          description: "Internal Server Error: Unexpected error"
  # /... endpoints
  /upload_url:
    get:
      tags:
        - root
      summary: Get S3 presigned upload URL
      operationId: getS3PresignedUploadURL
      parameters:
        - in: query
          name: temporary
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: "OK: Presigned URL created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignedURL"
        "400":
          description: "Bad Request: Check temporary"
        "500":
          description: "Internal Server Error: Unexpected error"
components:
  schemas:
    Message:
      required:
        - shopID
        - platform
        - pageID
        - conversationID
        - messageID
        - timestamp
        - source
        - message
        - attachments
        - isDeleted
      type: object
      properties:
        shopID:
          type: string
        platform:
          type: string
        pageID:
          type: string
        conversationID:
          type: string
        messageID:
          type: string
        timestamp:
          type: integer
          format: int64
        source:
          $ref: "#/components/schemas/Source"
        message:
          type: string
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        replyTo:
          $ref: "#/components/schemas/RepliedMessage"
        isDeleted:
          type: boolean
    Source:
      required:
        - userID
        - userType
      type: object
      properties:
        userID:
          type: string
        userType:
          type: string
    Attachment:
      required:
        - attachmentType
        - payload
      type: object
      properties:
        attachmentType:
          type: string
        payload:
          $ref: "#/components/schemas/Payload"
    Payload:
      required:
        - src
      type: object
      properties:
        src:
          type: string
    RepliedMessage:
      required:
        - messageID
      type: object
      properties:
        messageID:
          type: string
    Conversation:
      required:
        - shopID
        - platform
        - pageID
        - conversationID
        - conversationPic
        - updatedTime
        - participants
        - lastActivity
        - unread
      type: object
      properties:
        shopID:
          type: string
        platform:
          type: string
        pageID:
          type: string
        conversationID:
          type: string
        conversationPic:
          $ref: "#/components/schemas/Payload"
        updatedTime:
          type: integer
          format: int64
        participants:
          type: array
          items:
            $ref: "#/components/schemas/Participant"
        lastActivity:
          type: string
        unread:
          type: integer
    Participant:
      required:
        - userID
        - username
        - profilePic
      type: object
      properties:
        userID:
          type: string
        username:
          type: string
        profilePic:
          $ref: "#/components/schemas/Payload"
    ConversationArray:
      required:
        - conversations
      type: object
      properties:
        conversations:
          type: array
          items:
            $ref: "#/components/schemas/Conversation"
    MessageArray:
      required:
        - messages
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
    ConversationWrapper:
      required:
        - conversation
      type: object
      properties:
        conversation:
          $ref: "#/components/schemas/Conversation"
    MessageWrapper:
      required:
        - message
      type: object
      properties:
        message:
          $ref: "#/components/schemas/Message"
    PageStatus:
      type: object
      required:
        - unreadConversations
        - allConversations
      properties:
        unreadConversations:
          type: integer
        allConversations:
          type: integer
    # /{shop_id}/all/... data models
    PlatformsStatusesArray:
      type: object
      required:
        - statuses
      properties:
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/PlatformStatus"
    PlatformStatus:
      type: object
      required:
        - platform
        - unreadConversations
        - allConversations
      properties:
        platform:
          type: string
        unreadConversations:
          type: integer
        allConversations:
          type: integer
    # /shops/... data models
    Shop:
      type: object
      required:
        - shopID
      properties:
        shopID:
          type: string
        facebookPageID:
          type: string
        facebookAuthentication:
          $ref: "#/components/schemas/FacebookAuthentication"
        instagramPageID:
          type: string
        instagramAuthentication:
          $ref: "#/components/schemas/InstagramAuthentication"
        linePageID:
          type: string
        lineAuthentication:
          $ref: "#/components/schemas/LineAuthentication"
    FacebookAuthentication:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
    InstagramAuthentication:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
    LineAuthentication:
      type: object
      required:
        - accessToken
        - secret
      properties:
        accessToken:
          type: string
        secret:
          type: string
    ShopWrapper: # TODO use this instead of Shop in response
      type: object
      required:
        - shop
      properties:
        shop:
          $ref: "#/components/schemas/Shop"
    ShopPlatformsInfoArray:
      type: object
      properties:
        available_pages: # TODO convert to camel case
          type: array
          items:
            $ref: "#/components/schemas/PlatformInfo"
    PlatformInfo:
      type: object
      required:
        - platform_name # TODO convert to camel case
        - page_id # TODO convert to camel case
      properties:
        platform_name:
          type: string
        page_id:
          type: string
    ShopConfig:
      type: object
      required:
        - shopID
        - templates
      properties:
        shopID:
          type: string
        templates:
          type: array
          items:
            $ref: "#/components/schemas/ShopTemplate"
    ShopTemplate:
      type: object
      required:
        - id
        - payload
      properties:
        id:
          type: string
        payload:
          type: string
    ShopConfigWrapper:
      type: object
      required:
        - shopConfig
      properties:
        shopConfig:
          $ref: "#/components/schemas/ShopConfig"
    # /... data models
    PresignedURL:
      type: object
      required:
        - presignedURL
      properties:
        presignedURL:
          type: string
    # common attachment types
    PostMessageAttachmentPayloadImage:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the image"
    PostMessageAttachmentPayloadVideo:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the video"
    PostMessageAttachmentPayloadAudio:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the audio"
    PostMessageAttachmentPayloadFile:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the file"
    # line template messages
    PostMessageAttachmentPayloadLineTemplateButtons:
      type: object
      required:
        - line_template_buttons
      properties:
        line_template_buttons:
          $ref: "#/components/schemas/LineTemplateButtons"
    PostMessageAttachmentPayloadLineTemplateConfirm:
      type: object
      required:
        - line_template_confirm
      properties:
        line_template_confirm:
          $ref: "#/components/schemas/LineTemplateConfirm"
    PostMessageAttachmentPayloadLineTemplateCarousel:
      type: object
      required:
        - line_template_carousel
      properties:
        line_template_carousel:
          $ref: "#/components/schemas/LineTemplateCarousel"
    PostMessageAttachmentPayloadLineTemplateImageCarousel:
      type: object
      required:
        - line_template_image_carousel
      properties:
        line_template_image_carousel:
          $ref: "#/components/schemas/LineTemplateImageCarousel"
    LineTemplateButtons:
      type: object
      required:
        - altText
        - text
        - actions
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient
            Max character limit: 400
        thumbnailImageUrl:
          type: string
          description: |
            Image URL
            Max character limit: 2000
            HTTPS overTLS 1.2 or later
            JPEG or PNG
            Aspect ratio: 1:1
            Max width: 1024px
            Max file size: 10 MB
        text:
          type: string
          description: |
            Text displayed in the template
            Max character limit: 160 (no image or title)
            Max character limit: 60 (message with an image or title)
        defaultAction:
          $ref: "#/components/schemas/LineTemplateAction"
        actions:
          type: array
          description: |
            Action when tapped
            Max objects: 4
          items:
            $ref: "#/components/schemas/LineTemplateAction"
    LineTemplateConfirm:
      type: object
      required:
        - altText
        - text
        - actions
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient
            Max character limit: 400
        text:
          type: string
          description: |
            Text displayed in the template
            Max character limit: 240
        actions:
          type: array
          description: |
            Action when tapped
            2 objects only
          items:
            $ref: "#/components/schemas/LineTemplateAction"
    LineTemplateCarousel:
      type: object
      required:
        - altText
        - columns
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient
            Max character limit: 400
        columns:
          type: array
          description: |
            Array of columns
            Max objects: 10
          items:
            $ref: "#/components/schemas/LineTemplateCarouselColumn"
    LineTemplateCarouselColumn:
      type: object
      required:
        - text
        - actions
      properties:
        thumbnailImageUrl:
          type: string
          description: |
            Image URL
            Max character limit: 2000
            HTTPS overTLS 1.2 or later
            JPEG or PNG
            Aspect ratio: 1.51:1 (width:height)
            Max width: 1024px
            Max file size: 10 MB
        title:
          type: string
          description: |
            Title
            Max character limit: 40
        text:
          type: string
          description: |
            Message text
            Max character limit: 120 (no image or title)
            Max character limit: 60 (message with an image or title)
        defaultAction:
          $ref: "#/components/schemas/LineTemplateAction"
        actions:
          type: array
          description: |
            Action when tapped
            Max objects: 3
          items:
            $ref: "#/components/schemas/LineTemplateAction"
    LineTemplateImageCarousel:
      type: object
      required:
        - altText
        - columns
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient
            Max character limit: 400
        columns:
          type: array
          description: |
            Array of columns
            Max objects: 10
          items:
            $ref: "#/components/schemas/LineTemplateImageCarouselColumn"
    LineTemplateImageCarouselColumn:
      type: object
      required:
        - imageUrl
        - action
      properties:
        imageUrl:
          type: string
          description: |
            Image URL
            Max character limit: 2000
            HTTPS overTLS 1.2 or later
            JPEG or PNG
            Aspect ratio: 1:1
            Max width: 1024px
            Max file size: 10 MB
        action:
          $ref: "#/components/schemas/LineTemplateAction"
    LineTemplateAction:
      type: object
      required:
        - uri
      properties:
        label:
          type: string
          description: |
            Label for the action
            Max character limit: 12 (Image carousel template)
            Max character limit: 20 (Other than image carousel)
        uri:
          type: string
          description: |
            URI opened when the action is performed (Max character limit: 1000)
            http(s)://
            line://
            tel:
    # facebook template messages
    PostMessageAttachmentPayloadFacebookTemplateGeneric:
      type: object
      required:
        - fb_template_generic
      properties:
        fb_template_generic:
          $ref: "#/components/schemas/FacebookTemplateGeneric"
    FacebookTemplateGeneric:
      type: object
      description: |
        Requires title and at least one of the following elements: message, picture, or buttons.
      required:
        - title
      properties:
        title:
          type: string
        message:
          type: string
        picture:
          type: string
        buttons:
          type: array
          items:
            $ref: "#/components/schemas/FacebookButton"
        default_action:
          $ref: "#/components/schemas/FacebookDefaultAction"
    FacebookButton:
      type: object
      required:
        - url
        - title
      properties:
        url:
          type: string
        title:
          type: string
    FacebookDefaultAction:
      type: object
      required:
        - url
      properties:
        url:
          type: string
    # instagram template messages
    PostMessageAttachmentPayloadInstagramGeneric:
      type: object
      required:
        - ig_template_generic
      properties:
        ig_template_generic:
          $ref: "#/components/schemas/InstagramTemplateGeneric"
    InstagramTemplateGeneric:
      type: object
      description: |
        Requires title and at least one of the following elements: message, picture, or buttons.
      required:
        - title
      properties:
        title:
          type: string
        message:
          type: string
        picture:
          type: string
        buttons:
          type: array
          items:
            $ref: "#/components/schemas/InstagramButton"
        default_action:
          $ref: "#/components/schemas/InstagramDefaultAction"
    InstagramButton:
      type: object
      required:
        - url
        - title
      properties:
        url:
          type: string
        title:
          type: string
    InstagramDefaultAction:
      type: object
      required:
        - url
      properties:
        url:
          type: string
  parameters:
    # path parameters
    ShopID:
      in: path
      name: shop_id
      schema:
        type: string
      required: true
    PageID:
      in: path
      name: page_id
      schema:
        type: string
      required: true
    ConversationID:
      in: path
      name: conversation_id
      schema:
        type: string
      required: true
    # query string parameters
    Skip:
      in: query
      name: skip
      schema:
        type: integer
        default: 0
      required: false
    Limit:
      in: query
      name: limit
      schema:
        type: integer
        default: 10
      required: false
    ListMessagesFilter:
      in: query
      name: filter
      schema:
        type: object
        properties:
          with_message:
            type: string
            description: Only list messages that contain this string.
      required: false
    ListConversationsFilter:
      in: query
      name: filter
      description: |
        Only one filter field can be provided at a time.
      schema:
        type: object
        properties:
          with_participants_username:
            type: string
            description: Only list conversations that contain this username (display name).
          with_message:
            type: string
            description: Only list conversations that contain messages containing this string.
      required: false
  requestBodies:
    PatchConversation:
      content:
        application/json:
          schema:
            type: object
            properties:
              unread:
                type: integer