openapi: "3.0.1"
info:
  title: "Botio Live Chat API"
  description: "This is an API for Botio livechat system."
  version: "1.0.0"
  contact:
    email: "admin@botio.io"
servers:
  # id is subject to change
  - url: "https://{id}.execute-api.ap-southeast-1.amazonaws.com/{stage}"
    variables:
      id:
        default: "ze3s644f2h"
      stage:
        default: "dev"
tags:
  - name: facebook
    description: "Operations that involve facebook platform"
  - name: instagram
    description: "Operations that involve instagram platform"
  - name: line
    description: "Operations that involve line platform"
  - name: all
    description: "Operations that involve all platforms"
  - name: shop
    description: "Operations that involve shop meta information"
  - name: root
    description: "Top-level operations"
paths:
  # /{shop_id}/facebook/...
  /shops/{shop_id}/facebook/{page_id}/webhook:
    get:
      tags:
        - facebook
      summary: Facebook webhook verification
      description: |
        For use by facebook to verify a webhook endpoint.
      operationId: verifyFacebookWebhook
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Webhook handler is up and running."
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - facebook
      summary: Facebook webhook events
      description: |
        For use by facebook to send webhook events.
      operationId: facebookWebhook
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Webhook events received."
        "400":
          description: "Bad Request: Check path parameters."
        "401":
          description: "Unauthorized: Invalid signature."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/facebook/{page_id}/conversations/{conversation_id}:
    get:
      tags:
        - facebook
      summary: Get a facebook conversation
      operationId: getFacebookConversation
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
      responses:
        "200":
          description: "OK: Conversation found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversationWrapper"
        "400":
          description: "Bad request: Check path parameters."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
    patch:
      tags:
        - facebook
      summary: Update a facebook conversation's field(s)
      operationId: patchFacebookConversation
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
      requestBody:
        $ref: "#/components/requestBodies/patchConversation"
      responses:
        "200":
          description: "OK: Conversation updated."
        "400":
          description: "Bad request: Check path parameters and request body."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/facebook/{page_id}/conversations:
    get:
      tags:
        - facebook
      summary: List a facebook page's conversations
      operationId: listFacebookPageConversations
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/listConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversationArray"
        "204":
          description: "No Content: No conversations found"
        "400":
          description: "Bad Request: Check path parameters and query string parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/facebook/{page_id}/conversations/{conversation_id}/messages:
    get:
      tags:
        - facebook
      summary: List a facebook conversation's messages
      operationId: listFacebookConversationMessages
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/listMessagesFilter"
      responses:
        "200":
          description: "OK: Messages found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messageArray"
        "204":
          description: "No Content: No messages found"
        "400":
          description: "Bad Request: Check path parameters and query string parameters."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - facebook
      summary: Send a message to a facebook conversation
      operationId: postFacebookMessage
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
        - $ref: "#/components/parameters/psid"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
                - type: object
                  required:
                    - attachment
                  properties:
                    attachment:
                      type: object
                      required:
                        - type
                        - payload
                      properties:
                        type:
                          type: string
                          enum:
                            - "image"
                            - "video"
                            - "audio"
                            - "file"
                            - "facebookTemplateGeneric"
                        payload:
                          oneOf:
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadImage"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadVideo"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadAudio"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadFile"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadFacebookTemplateGeneric"
            examples:
              text:
                value:
                  message: "Hello, world!"
              image:
                value:
                  attachment:
                    type: "image"
                    payload:
                      src: "https://example.com/image.jpg"
              video:
                value:
                  attachment:
                    type: "video"
                    payload:
                      src: "https://example.com/video.mp4"
              audio:
                value:
                  attachment:
                    type: "audio"
                    payload:
                      src: "https://example.com/audio.mp3"
              file:
                value:
                  attachment:
                    type: "file"
                    payload:
                      src: "https://example.com/file.pdf"
              facebook template generic:
                value:
                  attachment:
                    type: "facebookTemplateGeneric"
                    payload:
                      facebookTemplateGeneric:
                        - title: "Your wishlist"
                          message: "Take a look at these great deals!"
                          picture: "https://example.com/image.jpg"
                          buttons:
                            - url: "https://example.com/product/1"
                              title: "View Product"
                            - url: "https://example.com/product/2"
                              title: "View Product"
      responses:
        "200":
          description: "OK: Message sent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postMessageResponse"
        "400":
          description: "Bad Request: Check path parameters and request body."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/facebook/{page_id}:
    get:
      tags:
        - facebook
      summary: Get a facebook page's conversations status
      description: |
        Get a facebook page's unread and all conversations counts.
      operationId: getFacebookPageConversationStatus
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Page's conversation status found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pageConversationStatus"
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  # /{shop_id}/instagram/...
  /shops/{shop_id}/instagram/{page_id}/webhook:
    get:
      tags:
        - instagram
      summary: Instagram webhook verification
      description: |
        For use by instagram to verify a webhook endpoint.
      operationId: verifyInstagramWebhook
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Webhook handler is up and running."
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - instagram
      summary: Instagram webhook events
      description: |
        For use by instagram to send webhook events.
      operationId: instagramWebhook
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Webhook events received."
        "400":
          description: "Bad Request: Check path parameters."
        "401":
          description: "Unauthorized: Invalid signature."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/instagram/{page_id}/conversations/{conversation_id}:
    get:
      tags:
        - instagram
      summary: Get an instagram conversation
      operationId: getInstagramConversation
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
      responses:
        "200":
          description: "OK: Conversation found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversationWrapper"
        "400":
          description: "Bad request: Check path parameters."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
    patch:
      tags:
        - instagram
      summary: Update an instagram conversation's field(s)
      operationId: patchInstagramConversation
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
      requestBody:
        $ref: "#/components/requestBodies/patchConversation"
      responses:
        "200":
          description: "OK: Conversation updated."
        "400":
          description: "Bad request: Check path parameters and request body."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/instagram/{page_id}/conversations:
    get:
      tags:
        - instagram
      summary: List an instagram page's conversations
      operationId: listInstagramPageConversations
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/listConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversationArray"
        "204":
          description: "No Content: No conversations found"
        "400":
          description: "Bad Request: Check path parameters and query string parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/instagram/{page_id}/conversations/{conversation_id}/messages:
    get:
      tags:
        - instagram
      summary: List an instagram conversation's messages
      operationId: listInstagramConversationMessages
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/listMessagesFilter"
      responses:
        "200":
          description: "OK: Messages found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messageArray"
        "204":
          description: "No Content: No messages found"
        "400":
          description: "Bad Request: Check path parameters and query string parameters."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - instagram
      summary: Send a message to an instagram conversation
      operationId: postInstagramMessage
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
        - $ref: "#/components/parameters/psid"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
                - type: object
                  required:
                    - attachment
                  properties:
                    attachment:
                      type: object
                      required:
                        - type
                        - payload
                      properties:
                        type:
                          type: string
                          enum:
                            - "image"
                            - "video"
                            - "audio"
                            - "file"
                            - "instagramTemplateGeneric"
                        payload:
                          oneOf:
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadImage"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadVideo"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadAudio"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadFile"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadInstagramGeneric"
            examples:
              text:
                value:
                  message: "Hello, world!"
              image:
                value:
                  attachment:
                    type: "image"
                    payload:
                      src: "https://example.com/image.jpg"
              video:
                value:
                  attachment:
                    type: "video"
                    payload:
                      src: "https://example.com/video.mp4"
              audio:
                value:
                  attachment:
                    type: "audio"
                    payload:
                      src: "https://example.com/audio.mp3"
              file:
                value:
                  attachment:
                    type: "file"
                    payload:
                      src: "https://example.com/file.pdf"
              instagram template generic:
                value:
                  attachment:
                    type: "instagramTemplateGeneric"
                    payload:
                      instagramTemplateGeneric:
                        - title: "Your wishlist"
                          message: "Take a look at these great deals!"
                          picture: "https://example.com/image.jpg"
                          buttons:
                            - url: "https://example.com/product/1"
                              title: "View Product"
                            - url: "https://example.com/product/2"
                              title: "View Product"
      responses:
        "200":
          description: "OK: Message sent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postMessageResponse"
        "400":
          description: "Bad Request: Check path parameters and request body."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/instagram/{page_id}:
    get:
      tags:
        - instagram
      summary: Get an instagram page's conversations status
      description: |
        Get an instagram page's unread and all conversation counts.
      operationId: getInstagramPageConversationStatus
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Page's conversation status found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pageConversationStatus"
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  # /{shop_id}/line/...
  /shops/{shop_id}/line/{page_id}/webhook:
    post:
      tags:
        - line
      summary: Line webhook events
      description: |
        For use by line to send webhook events.
      operationId: lineWebhook
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Webhook events received."
        "400":
          description: "Bad Request: Check path parameters."
        "401":
          description: "Unauthorized: Invalid signature."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/line/{page_id}/conversations/{conversation_id}:
    get:
      tags:
        - line
      summary: Get a line conversation
      operationId: getLineConversation
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
      responses:
        "200":
          description: "OK: Conversation found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversationWrapper"
        "400":
          description: "Bad request: Check path parameters."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
    patch:
      tags:
        - line
      summary: Update a line conversation's field(s)
      operationId: patchLineConversation
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
      requestBody:
        $ref: "#/components/requestBodies/patchConversation"
      responses:
        "200":
          description: "OK: Conversation updated."
        "400":
          description: "Bad request: Check path parameters and request body."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/line/{page_id}/conversations:
    get:
      tags:
        - line
      summary: List a line page's conversations
      operationId: listLinePageConversations
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/listConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversationArray"
        "204":
          description: "No Content: No conversations found"
        "400":
          description: "Bad Request: Check path parameters and query string parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/line/{page_id}/conversations/{conversation_id}/messages:
    get:
      tags:
        - line
      summary: List a line conversation's messages
      operationId: listLineConversationMessages
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/listMessagesFilter"
      responses:
        "200":
          description: "OK: Messages found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messageArray"
        "204":
          description: "No Content: No messages found"
        "400":
          description: "Bad Request: Check path parameters and query string parameters."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - line
      summary: Send a message to a line conversation
      operationId: postLineMessage
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
        - $ref: "#/components/parameters/conversationID"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
                - type: object
                  required:
                    - attachment
                  properties:
                    attachment:
                      required:
                        - type
                        - payload
                      properties:
                        type:
                          type: string
                          enum:
                            - "image"
                            - "video"
                            - "audio"
                            - "lineTemplateButtons"
                            - "lineTemplateConfirm"
                            - "lineTemplateCarousel"
                            - "lineTemplateImageCarousel"
                        payload:
                          oneOf:
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadImage"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadVideo"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadAudio"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadLineTemplateButtons"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadLineTemplateConfirm"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadLineTemplateCarousel"
                            - $ref: "#/components/schemas/postMessageAttachmentPayloadLineTemplateImageCarousel"
            examples:
              text:
                value:
                  message: "Hello, world!"
              image:
                value:
                  attachment:
                    type: "image"
                    payload:
                      src: "https://example.com/image.jpg"
              video:
                value:
                  attachment:
                    type: "video"
                    payload:
                      src: "https://example.com/video.mp4"
              audio:
                value:
                  attachment:
                    type: "audio"
                    payload:
                      src: "https://example.com/audio.mp3"
              line template buttons:
                value:
                  attachment:
                    type: "lineTemplateButtons"
                    payload:
                      lineTemplateButtons:
                        altText: "You have a new buttons template message!"
                        text: "Please select an option."
                        actions:
                          - label: "Option 1"
                            uri: "https://example.com/option1"
                          - label: "Option 2"
                            uri: "https://example.com/option2"
                          - label: "Option 3"
                            uri: "https://example.com/option3"
                          - label: "Option 4"
                            uri: "https://example.com/option4"
              line template confirm:
                value:
                  attachment:
                    type: "lineTemplateConfirm"
                    payload:
                      lineTemplateConfirm:
                        altText: "You have a new confirm template message!"
                        text: "Please select an option."
                        actions:
                          - label: "Yes"
                            uri: "https://example.com/yes"
                          - label: "No"
                            uri: "https://example.com/no"
              line template carousel:
                value:
                  attachment:
                    type: "lineTemplateCarousel"
                    payload:
                      lineTemplateCarousel:
                        altText: "You have a new carousel template message!"
                        columns:
                          - text: "Please select an option."
                            actions:
                              - label: "Option 1"
                                uri: "https://example.com/option1"
                              - label: "Option 2"
                                uri: "https://example.com/option2"
                              - label: "Option 3"
                                uri: "https://example.com/option3"
                          - text: "Please select an option."
                            actions:
                              - label: "Option 1"
                                uri: "https://example.com/option1"
                              - label: "Option 2"
                                uri: "https://example.com/option2"
                              - label: "Option 3"
                                uri: "https://example.com/option3"
                          - text: "Please select an option."
                            actions:
                              - label: "Option 1"
                                uri: "https://example.com/option1"
                              - label: "Option 2"
                                uri: "https://example.com/option2"
                              - label: "Option 3"
                                uri: "https://example.com/option3"
              line template image carousel:
                value:
                  attachment:
                    type: "lineTemplateImageCarousel"
                    payload:
                      lineTemplateImageCarousel:
                        altText: "You have a new image carousel template message!"
                        columns:
                          - imageUrl: "https://example.com/image1.jpg"
                            action:
                              label: "Option 1"
                              uri: "https://example.com/option1"
                          - imageUrl: "https://example.com/image2.jpg"
                            action:
                              label: "Option 2"
                              uri: "https://example.com/option2"
                          - imageUrl: "https://example.com/image3.jpg"
                            action:
                              label: "Option 3"
                              uri: "https://example.com/option3"
      responses:
        "200":
          description: "OK: Message sent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postMessageResponse"
        "400":
          description: "Bad Request: Check path parameters and request body."
        "404":
          description: "Not Found: Conversation not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/line/{page_id}:
    get:
      tags:
        - line
      summary: Get a line page's conversations status
      description: |
        Get a line page's unread and all conversations counts.
      operationId: getLinePageConversationStatus
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/pageID"
      responses:
        "200":
          description: "OK: Page's conversation status found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pageConversationStatus"
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Page not found."
        "500":
          description: "Internal Server Error"
  # /shops/{shop_id}/all/...
  /shops/{shop_id}/all:
    get:
      tags:
        - all
      summary: List a shop's all platforms' conversations status.
      operationId: ListShopAllPlatformsConversationsStatus
      parameters:
        - $ref: "#/components/parameters/shopID"
      responses:
        "200":
          description: "OK: Status found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shopPlatformsConversationsStatusArray"
        "204":
          description: "No Content: No status found."
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/all/conversations:
    get:
      tags:
        - all
      summary: List a shop's all platforms' conversations.
      operationId: listShopAllPlatformsConversations
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/listConversationsFilter"
      responses:
        "200":
          description: "OK: Conversations found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversationArray"
        "204":
          description: "No Content: No conversations found."
        "400":
          description: "Bad Request: Check path parameters and query string parameters."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
  # /shops/...
  /shops:
    post:
      tags:
        - shop
      summary: Create a shop
      description: |
        Create a shop  with the information provided in the request body.
        Also creates an empty shop config of the shop.
      operationId: postShop
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                facebookPageID:
                  type: string
                facebookAccessToken:
                  type: string
                instagramPageID:
                  type: string
                instagramAccessToken:
                  type: string
                linePageID:
                  type: string
                lineAccessToken:
                  type: string
                lineSecret:
                  type: string
      responses:
        "200":
          description: "OK: Shop created."
          content:
            application/json:
              schema:
                type: object
                properties:
                  shopID:
                    type: string
                    description: ID of the created shop
        "400":
          description: "Bad Request: Check request body."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}:
    get:
      tags:
        - shop
      summary: List a shop's available pages
      operationId: listShopAvailablePages
      parameters:
        - $ref: "#/components/parameters/shopID"
      responses:
        "200":
          description: "OK: Pages found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shopAvailablePagesArray"
        "204":
          description: "No Content: No pages found."
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
    patch:
      tags:
        - shop
      summary: Update a shop's information
      operationId: patchShop
      parameters:
        - $ref: "#/components/parameters/shopID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                facebookPageID:
                  type: string
                facebookAccessToken:
                  type: string
                instagramPageID:
                  type: string
                instagramAccessToken:
                  type: string
                linePageID:
                  type: string
                lineAccessToken:
                  type: string
                lineSecret:
                  type: string
      responses:
        "200":
          description: "OK: Shop patched."
        "400":
          description: "Bad Request: Check path parameters and request body."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/config:
    get:
      tags:
        - shop
      summary: Get a shop's config
      operationId: getShopConfig
      parameters:
        - $ref: "#/components/parameters/shopID"
      responses:
        "200":
          description: "OK: Config found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shopConfigWrapper"
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
    patch:
      deprecated: true
      tags:
        - shop
      summary: Add a new shop's saved template message
      description: |
        Use `POST /shops/{shop_id}/config/templates` to add a new shop config template instead.
      operationId: patchShopConfig
      parameters:
        - $ref: "#/components/parameters/shopID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - templatePayload
              properties:
                templatePayload:
                  type: string
            examples:
              add a new template message:
                value:
                  templatePayload: "some template message payload"
      responses:
        "200":
          description: "OK: Template message added."
          content:
            application/json:
              schema:
                type: object
                required:
                  - templateID
                properties:
                  templateID:
                    type: string
                    description: ID of the created template message
        "400":
          description: "Bad Request: Check path parameters and request body."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/config/templates:
    post:
      tags:
        - shop
      summary: Add a new shop's saved template message
      operationId: postShopTemplate
      parameters:
        - $ref: "#/components/parameters/shopID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - templatePayload
              properties:
                templatePayload:
                  type: string
            examples:
              add a new template message:
                value:
                  templatePayload: "some template message payload"
      responses:
        "200":
          description: "OK: Template message added."
          content:
            application/json:
              schema:
                type: object
                required:
                  - templateID
                properties:
                  templateID:
                    type: string
                    description: ID of the created template message
        "400":
          description: "Bad Request: Check path parameters and request body."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
    get:
      tags:
        - shop
      summary: List a shop's saved template messages
      operationId: listShopTemplates
      parameters:
        - $ref: "#/components/parameters/shopID"
      responses:
        "200":
          description: "OK: Template messages found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shopTemplateArray"
        "204":
          description: "No Content: No template messages found."
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
  /shops/{shop_id}/config/templates/{template_id}:
    delete:
      tags:
        - shop
      summary: Delete a shop's saved template message
      operationId: deleteShopTemplate
      parameters:
        - $ref: "#/components/parameters/shopID"
        - $ref: "#/components/parameters/templateID"
      responses:
        "200":
          description: "OK: Template message deleted."
        "400":
          description: "Bad Request: Check path parameters."
        "404":
          description: "Not Found: Shop not found."
        "500":
          description: "Internal Server Error"
  # /...
  /upload_url:
    get:
      tags:
        - root
      summary: Get an S3 presigned upload URL
      operationId: getS3PresignedUploadURL
      parameters:
        - in: query
          name: temporary
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: "OK: Presigned upload URL created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/presignedURL"
        "400":
          description: "Bad Request: Check query string parameters."
        "500":
          description: "Internal Server Error"
components:
  schemas:
    message:
      required:
        - shopID
        - platform
        - pageID
        - conversationID
        - messageID
        - timestamp
        - source
        - message
        - attachments
        - isDeleted
      type: object
      properties:
        shopID:
          type: string
        platform:
          type: string
        pageID:
          type: string
        conversationID:
          type: string
        messageID:
          type: string
        timestamp:
          type: integer
          format: int64
        source:
          $ref: "#/components/schemas/source"
        message:
          type: string
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/attachment"
        replyTo:
          $ref: "#/components/schemas/repliedMessage"
        isDeleted:
          type: boolean
    source:
      required:
        - userID
        - userType
      type: object
      properties:
        userID:
          type: string
        userType:
          type: string
    attachment:
      required:
        - attachmentType
        - payload
      type: object
      properties:
        attachmentType:
          type: string
        payload:
          $ref: "#/components/schemas/payload"
    payload:
      required:
        - src
      type: object
      properties:
        src:
          type: string
    repliedMessage:
      required:
        - messageID
      type: object
      properties:
        messageID:
          type: string
    conversation:
      required:
        - shopID
        - platform
        - pageID
        - conversationID
        - conversationPic
        - updatedTime
        - participants
        - lastActivity
        - unread
      type: object
      properties:
        shopID:
          type: string
        platform:
          type: string
        pageID:
          type: string
        conversationID:
          type: string
        conversationPic:
          $ref: "#/components/schemas/payload"
        updatedTime:
          type: integer
          format: int64
        participants:
          type: array
          items:
            $ref: "#/components/schemas/participant"
        lastActivity:
          type: string
        unread:
          type: integer
    participant:
      required:
        - userID
        - username
        - profilePic
      type: object
      properties:
        userID:
          type: string
        username:
          type: string
        profilePic:
          $ref: "#/components/schemas/payload"
    conversationArray:
      required:
        - conversations
      type: object
      properties:
        conversations:
          type: array
          items:
            $ref: "#/components/schemas/conversation"
    messageArray:
      required:
        - messages
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/message"
    conversationWrapper:
      required:
        - conversation
      type: object
      properties:
        conversation:
          $ref: "#/components/schemas/conversation"
    messageWrapper:
      required:
        - message
      type: object
      properties:
        message:
          $ref: "#/components/schemas/message"
    pageConversationStatus:
      type: object
      required:
        - unreadConversations
        - allConversations
      properties:
        unreadConversations:
          type: integer
        allConversations:
          type: integer
    # /{shop_id}/all/... data models
    shopPlatformsConversationsStatusArray:
      type: object
      required:
        - statuses
      properties:
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/platformConversationsStatus"
    platformConversationsStatus:
      type: object
      required:
        - platform
        - unreadConversations
        - allConversations
      properties:
        platform:
          type: string
        unreadConversations:
          type: integer
        allConversations:
          type: integer
    # /shops/... data models
    shop:
      type: object
      required:
        - shopID
      properties:
        shopID:
          type: string
        facebookPageID:
          type: string
        facebookAuthentication:
          $ref: "#/components/schemas/facebookAuthentication"
        instagramPageID:
          type: string
        instagramAuthentication:
          $ref: "#/components/schemas/instagramAuthentication"
        linePageID:
          type: string
        lineAuthentication:
          $ref: "#/components/schemas/lineAuthentication"
    facebookAuthentication:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
    instagramAuthentication:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
    lineAuthentication:
      type: object
      required:
        - accessToken
        - secret
      properties:
        accessToken:
          type: string
        secret:
          type: string
    shopWrapper:
      type: object
      required:
        - shop
      properties:
        shop:
          $ref: "#/components/schemas/shop"
    shopAvailablePagesArray:
      type: object
      required:
        - availablePages
      properties:
        availablePages:
          type: array
          items:
            $ref: "#/components/schemas/pageInfo"
    pageInfo:
      type: object
      required:
        - platformName
        - pageID
      properties:
        platformName:
          type: string
        pageID:
          type: string
    shopConfig:
      type: object
      required:
        - shopID
        - templates
      properties:
        shopID:
          type: string
        templates:
          type: array
          items:
            $ref: "#/components/schemas/shopTemplate"
    shopTemplate:
      type: object
      required:
        - id
        - payload
      properties:
        id:
          type: string
        payload:
          type: string
    shopConfigWrapper:
      type: object
      required:
        - shopConfig
      properties:
        shopConfig:
          $ref: "#/components/schemas/shopConfig"
    shopTemplateArray:
      type: object
      required:
        - templates
      properties:
        templates:
          type: array
          items:
            $ref: "#/components/schemas/shopTemplate"
    # /... data models
    presignedURL:
      type: object
      required:
        - presignedURL
      properties:
        presignedURL:
          type: string
    # post message response
    postMessageResponse:
      type: object
      required:
        - recipientID
        - messageID
        - timestamp
      properties:
        recipientID:
          type: string
        messageID:
          type: string
        timestamp:
          type: string
    # common attachment types
    postMessageAttachmentPayloadImage:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the image"
    postMessageAttachmentPayloadVideo:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the video"
    postMessageAttachmentPayloadAudio:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the audio"
    postMessageAttachmentPayloadFile:
      type: object
      required:
        - src
      properties:
        src:
          type: string
          description: "URL of the file"
    # line template messages
    postMessageAttachmentPayloadLineTemplateButtons:
      type: object
      required:
        - lineTemplateButtons
      properties:
        lineTemplateButtons:
          $ref: "#/components/schemas/lineTemplateButtons"
    postMessageAttachmentPayloadLineTemplateConfirm:
      type: object
      required:
        - lineTemplateConfirm
      properties:
        lineTemplateConfirm:
          $ref: "#/components/schemas/lineTemplateConfirm"
    postMessageAttachmentPayloadLineTemplateCarousel:
      type: object
      required:
        - lineTemplateCarousel
      properties:
        lineTemplateCarousel:
          $ref: "#/components/schemas/lineTemplateCarousel"
    postMessageAttachmentPayloadLineTemplateImageCarousel:
      type: object
      required:
        - lineTemplateImageCarousel
      properties:
        lineTemplateImageCarousel:
          $ref: "#/components/schemas/lineTemplateImageCarousel"
    lineTemplateButtons:
      type: object
      required:
        - altText
        - text
        - actions
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient  
            Max character limit: 400

        thumbnailImageUrl:
          type: string
          description: |
            Image URL
            Max character limit: 2000
            HTTPS overTLS 1.2 or later
            JPEG or PNG
            Aspect ratio: 1:1
            Max width: 1024px
            Max file size: 10 MB
        text:
          type: string
          description: |
            Text displayed in the template  
            Max character limit: 160 (no image or title)  
            Max character limit: 60 (message with an image or title)

        defaultAction:
          $ref: "#/components/schemas/lineTemplateAction"
        actions:
          type: array
          description: |
            Action when tapped
            Max objects: 4
          items:
            $ref: "#/components/schemas/lineTemplateAction"
    lineTemplateConfirm:
      type: object
      required:
        - altText
        - text
        - actions
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient  
            Max character limit: 400

        text:
          type: string
          description: |
            Text displayed in the template  
            Max character limit: 240

        actions:
          type: array
          description: |
            Action when tapped  
            2 objects only

          items:
            $ref: "#/components/schemas/lineTemplateAction"
    lineTemplateCarousel:
      type: object
      required:
        - altText
        - columns
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient  
            Max character limit: 400

        columns:
          type: array
          description: |
            Array of columns  
            Max objects: 10

          items:
            $ref: "#/components/schemas/lineTemplateCarouselColumn"
    lineTemplateCarouselColumn:
      type: object
      required:
        - text
        - actions
      properties:
        thumbnailImageUrl:
          type: string
          description: |
            Image URL  
            Max character limit: 2000  
            HTTPS overTLS 1.2 or later  
            JPEG or PNG  
            Aspect ratio: 1.51:1 (width:height)  
            Max width: 1024px  
            Max file size: 10 MB

        title:
          type: string
          description: |
            Title  
            Max character limit: 40

        text:
          type: string
          description: |
            Message text  
            Max character limit: 120 (no image or title)  
            Max character limit: 60 (message with an image or title)

        defaultAction:
          $ref: "#/components/schemas/lineTemplateAction"
        actions:
          type: array
          description: |
            Action when tapped  
            Max objects: 3

          items:
            $ref: "#/components/schemas/lineTemplateAction"
    lineTemplateImageCarousel:
      type: object
      required:
        - altText
        - columns
      properties:
        altText:
          type: string
          description: |
            Text displayed in notification and chat list of the recipient  
            Max character limit: 400

        columns:
          type: array
          description: |
            Array of columns  
            Max objects: 10

          items:
            $ref: "#/components/schemas/lineTemplateImageCarouselColumn"
    lineTemplateImageCarouselColumn:
      type: object
      required:
        - imageUrl
        - action
      properties:
        imageUrl:
          type: string
          description: |
            Image URL  
            Max character limit: 2000  
            HTTPS overTLS 1.2 or later  
            JPEG or PNG  
            Aspect ratio: 1:1  
            Max width: 1024px  
            Max file size: 10 MB

        action:
          $ref: "#/components/schemas/lineTemplateAction"
    lineTemplateAction:
      type: object
      required:
        - uri
      properties:
        label:
          type: string
          description: |
            Label for the action  
            Max character limit: 12 (Image carousel template)  
            Max character limit: 20 (Other than image carousel)

        uri:
          type: string
          description: |
            URI opened when the action is performed (Max character limit: 1000)  
            http(s)://  
            line://  
            tel:

    # facebook template messages
    postMessageAttachmentPayloadFacebookTemplateGeneric:
      type: object
      required:
        - facebookTemplateGeneric
      properties:
        facebookTemplateGeneric:
          type: array
          items:
            $ref: "#/components/schemas/facebookTemplateGeneric"
    facebookTemplateGeneric:
      type: object
      description: |
        Requires title and at least one of the following elements: message, picture, or buttons.

      required:
        - title
      properties:
        title:
          type: string
        message:
          type: string
        picture:
          type: string
        buttons:
          type: array
          items:
            $ref: "#/components/schemas/facebookButton"
        default_action:
          $ref: "#/components/schemas/facebookDefaultAction"
    facebookButton:
      type: object
      required:
        - url
        - title
      properties:
        url:
          type: string
        title:
          type: string
    facebookDefaultAction:
      type: object
      required:
        - url
      properties:
        url:
          type: string
    # instagram template messages
    postMessageAttachmentPayloadInstagramGeneric:
      type: object
      required:
        - instagramTemplateGeneric
      properties:
        instagramTemplateGeneric:
          type: array
          items:
            $ref: "#/components/schemas/instagramTemplateGeneric"
    instagramTemplateGeneric:
      type: object
      description: |
        Requires title and at least one of the following elements: message, picture, or buttons.

      required:
        - title
      properties:
        title:
          type: string
        message:
          type: string
        picture:
          type: string
        buttons:
          type: array
          items:
            $ref: "#/components/schemas/instagramButton"
        default_action:
          $ref: "#/components/schemas/instagramDefaultAction"
    instagramButton:
      type: object
      required:
        - url
        - title
      properties:
        url:
          type: string
        title:
          type: string
    instagramDefaultAction:
      type: object
      required:
        - url
      properties:
        url:
          type: string
  parameters:
    # path parameters
    shopID:
      in: path
      name: shop_id
      schema:
        type: string
      required: true
    pageID:
      in: path
      name: page_id
      schema:
        type: string
      required: true
    conversationID:
      in: path
      name: conversation_id
      schema:
        type: string
      required: true
    templateID:
      in: path
      name: template_id
      schema:
        type: string
      required: true
    # query string parameters
    skip:
      in: query
      name: skip
      schema:
        type: integer
        default: 0
      required: false
    limit:
      in: query
      name: limit
      schema:
        type: integer
        default: infinity
      required: false
    listMessagesFilter:
      in: query
      name: filter
      schema:
        type: object
        properties:
          withMessage:
            type: string
            description: Only list messages that contain this string.
      examples:
        messages containing "hello":
          value:
            withMessage: hello
      required: false
    listConversationsFilter:
      in: query
      name: filter
      description: |
        Only one filter field can be provided at a time.
      schema:
        type: object
        properties:
          withParticipantsUsername:
            type: string
            description: Only list conversations that contain this username (display name).
          withMessage:
            type: string
            description: Only list conversations that contain messages containing this string.
      examples:
        conversations containing user "john":
          value:
            withParticipantsUsername: john
        conversations containing message "hello":
          value:
            withMessage: hello
      required: false
    psid:
      in: query
      name: psid
      description: |
        The PSID of the user to send the message to (used for facebook and instagram).
      schema:
        type: string
      required: true
  requestBodies:
    patchConversation:
      content:
        application/json:
          schema:
            type: object
            properties:
              unread:
                type: integer
          examples:
            mark as read:
              value:
                unread: 0